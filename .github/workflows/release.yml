# Copyright 2025 John Casey
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'  # Also support pre-release tags like v1.0.0-beta

env:
  GO111MODULE: on
  GOPROXY: direct

permissions:
  contents: write  # Required for creating releases and uploading assets
  packages: write  # Required for pushing container images

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test -v ./...

      # - name: Run linting
      #   uses: golangci/golangci-lint-action@v3
      #   with:
      #     version: latest
      #     args: --timeout=5m

  security:
    name: Security Analysis
    uses: ./.github/workflows/security-scan-reusable.yml
    with:
      upload_sarif: true

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows ARM64 builds are not commonly needed
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Set binary name based on OS
          BINARY_NAME="myshift"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="myshift.exe"
          fi
          
          # Set archive name
          ARCHIVE_NAME="myshift-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            ARCHIVE_NAME="${ARCHIVE_NAME}.zip"
          else
            ARCHIVE_NAME="${ARCHIVE_NAME}.tar.gz"
          fi
          
          # Build the binary
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o "${BINARY_NAME}" ./cmd/myshift
          
          # Create archive
          if [ "$GOOS" = "windows" ]; then
            zip "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE
          else
            tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE
          fi
          
          # Generate checksum
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
          else
            shasum -a 256 "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: myshift-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            myshift-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.*
          retention-days: 5
      
  container:
    name: Build and Push Container
    needs: [test, security]
    uses: ./.github/workflows/container-build-reusable.yml
    with:
      image_tags: "latest ${{ github.ref_name }} ${{ github.sha }}"
      push_image: true
    secrets:
      registry_username: ${{ secrets.QUAY_BOT_USER }}
      registry_password: ${{ secrets.QUAY_BOT_PASSWORD }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, container]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "myshift-*" -type f | while read file; do
            cp "$file" release-assets/
          done
          ls -la release-assets/

      - name: Create release with notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $GITHUB_REF_NAME --generate-notes release-assets/*
  