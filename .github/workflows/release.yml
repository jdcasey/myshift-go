# Copyright 2025 John Casey
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'  # Also support pre-release tags like v1.0.0-beta

env:
  GO111MODULE: on
  GOPROXY: direct

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test -v ./...

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows ARM64 builds are not commonly needed
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Set binary name based on OS
          BINARY_NAME="myshift"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="myshift.exe"
          fi
          
          # Set archive name
          ARCHIVE_NAME="myshift-${{ steps.version.outputs.VERSION }}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            ARCHIVE_NAME="${ARCHIVE_NAME}.zip"
          else
            ARCHIVE_NAME="${ARCHIVE_NAME}.tar.gz"
          fi
          
          # Build the binary
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" -o "${BINARY_NAME}" ./cmd/myshift
          
          # Create archive
          if [ "$GOOS" = "windows" ]; then
            zip "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE
          else
            tar -czf "${ARCHIVE_NAME}" "${BINARY_NAME}" README.md LICENSE
          fi
          
          # Generate checksum
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
          else
            shasum -a 256 "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: myshift-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            myshift-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.*
          retention-days: 5

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog generation

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "myshift-*" -type f | while read file; do
            cp "$file" release-assets/
          done
          ls -la release-assets/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          
          # If no previous tag, use initial commit
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Generating changelog from $PREV_TAG to ${{ steps.version.outputs.VERSION }}"
          
          # Generate changelog
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ steps.version.outputs.VERSION }} --no-merges)
          
          # Create release notes
          cat > release-notes.md << EOF
          # myshift-go ${{ steps.version.outputs.VERSION }}
          
          ## What's Changed
          
          $CHANGELOG
          
          ## Installation
          
          ### Download Binary
          
          Download the appropriate binary for your platform from the assets below.
          
          ### Linux/macOS
          \`\`\`bash
          # Download and extract (replace with your platform)
          curl -L https://github.com/jdcasey/myshift-go/releases/download/${{ steps.version.outputs.VERSION }}/myshift-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz | tar xz
          
          # Make executable and move to PATH
          chmod +x myshift
          sudo mv myshift /usr/local/bin/
          \`\`\`
          
          ### Windows
          Download the \`.zip\` file and extract \`myshift.exe\` to a directory in your PATH.
          
          ### Verify Installation
          \`\`\`bash
          myshift --version
          \`\`\`
          
          ## Security
          
          All release assets include SHA256 checksums for verification:
          \`\`\`bash
          # Verify checksum (Linux/macOS)
          sha256sum -c myshift-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz.sha256
          \`\`\`
          
          **Full Changelog**: https://github.com/jdcasey/myshift-go/compare/$PREV_TAG...${{ steps.version.outputs.VERSION }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: myshift-go ${{ steps.version.outputs.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          files: |
            release-assets/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release with download counts
        run: |
          echo "Release created successfully!"
          echo "Download URLs:"
          find release-assets -name "*.tar.gz" -o -name "*.zip" | sort | while read file; do
            filename=$(basename "$file")
            echo "  https://github.com/jdcasey/myshift-go/releases/download/${{ steps.version.outputs.VERSION }}/$filename"
          done 